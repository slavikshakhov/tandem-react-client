{"version":3,"sources":["Constants.js","helpers/Input.js","components/Nav/Nav.js","components/Register/Register.js","components/UsersToMeet/UsersToMeet.js","components/MatchedUser/MatchedUser.js","components/MatchedUsers/MatchedUsers.js","components/LanguagesForm/LanguagesForm.js","components/Home/Home.js","PrivateRouter.js","components/Login/Login.js","components/Chat/Chat.js","components/ContactForm/ContactForm.js","App.js","serviceWorker.js","reducers/userStatus.js","reducers/languagesReducer.js","reducers/chatReducer.js","reducers/rootReducer.js","index.js"],"names":["config","url","API_URL","Input","validationRules","useState","value","setValue","touched","setTouched","initialErrors","key","errors","setErrors","reset","bind","onChange","e","target","Object","keys","length","errs","includes","required","minLength","maxLength","re","RegExp","pattern","console","log","test","validateOnChange","onBlur","validateOnBlur","Nav","history","useHistory","regMode","useSelector","state","userStatus","loggedIn","currentUser","photo","socket","chatReducer","dispatch","useDispatch","URL","name","bindName","resetName","nameTouched","nameErrors","password","bindPassword","resetPassword","passwordTouched","passwordErrors","invalidNameInput","invalidPasswordInputRequired","invalidPasswordInputShort","invalidPasswordInputLong","invalidNameLabel","invalidPasswordLabel","validPasswordLabel","invalidForm","values","filter","er","handleSubmit","preventDefault","user","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","data","undefined","token","localStorage","setItem","type","payload","push","className","src","id","htmlFor","href","onSubmit","autoComplete","to","onClick","removeItem","disconnect","placeholder","Register","props","registered","setRegistered","email","bindEmail","resetEmail","emailTouched","emailErrors","city","bindCity","resetCity","cityTouched","cityErrors","country","bindCountry","resetCountry","countryTouched","countryErrors","invalidEmailInput","invalidEmailLabel","invalidCityLabel","invalidCountryLabel","class","UsersToMeet","MatchedUser","userFromSocket","toUpperCase","slice","disabled","offeredLgs","map","lg","wantedLgs","MatchedUsers","users","filteredUsers","decodedToken","contactName","connectedUsers","setConnectedUsers","connectedMembers","setSocket","message","setMessage","notifyAboutMessage","setNotifyAboutMessage","useEffect","io","on","emit","userName","parse","members","text","chatter","sender","from","getUserFromSocket","connectedUser","LanguagesForm","languagesReducer","userOfferedLgs","userWantedLgs","useForm","register","watch","setEmptyOfferedLgsArr","setEmptyWantedLgsArr","offeredlgsArr","selected","wantedlgsArr","checkedOfferedLgs","setCheckedOfferedLgs","checkedWantedLgs","setCheckedWantedLgs","arr","lgFromDB","indexOf","setInitialOfferedLgsChecks","setInitialWantedLgsChecks","submitForm","a","requestOptionsOfferedLgs","offerelgs","offeredlgs","requestOptionsWantedLgs","wantedlgs","sortOfferedLgs","sortedOfferedLgs","sort","b","sortWantedLgs","sortedWantedLgs","onOfferedLgsCheckboxChange","checked","checkedLgsCopy","splice","onWantedLgsCheckboxChange","i","ref","for","Home","setOfferedLgs","setWantedLgs","setFilteredUsers","usersToMeet","getUserOfferedLgs","getUserWanteddLgs","searchUsers","resp","mode","offeredLgsArr","el","wantedLgsArr","matchedUsers","PrivateRoute","Component","component","path","rest","render","Login","Chat","setText","messageToSend","ContactForm","userToContact","contact","messageSent","setMessageSent","error","setError","subject","res","setTimeout","catch","err","defaultValue","App","exact","Boolean","window","location","hostname","match","defaultState","action","jwtDecode","require","isExpired","dateNow","Date","exp","getTime","offeredLgsMode","wantedLgsMode","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6908f6a.chunk.js","sourcesContent":["    const prod = {\r\n        url: {\r\n            API_URL: 'https://languages-tandem.herokuapp.com'            \r\n        }\r\n    };\r\n    const dev = {\r\n        url: {\r\n            API_URL: 'http://localhost:4000'\r\n        }\r\n    };\r\n    export const config = process.env.NODE_ENV === 'development' ? dev : prod;","import {useState} from \"react\";\r\n\r\n\r\nconst Input = (validationRules) => {\r\n    const [value, setValue] = useState('');\r\n    const [touched, setTouched] = useState(false);\r\n    let initialErrors = {...validationRules};\r\n    for(var key in initialErrors){\r\n        initialErrors[key] = false;\r\n    }\r\n    const [errors, setErrors] = useState(initialErrors);\r\n\r\n    const validateOnChange = (e) => {\r\n        let errs = {};\r\n        if(Object.keys(validationRules).includes('required')){\r\n            errs.required = e.target.value.length === 0 ? true : false;\r\n        }\r\n        if(Object.keys(validationRules).includes('minLength')){\r\n            errs.minLength = e.target.value.length < validationRules.minLength ? true : false;\r\n        }\r\n        if(Object.keys(validationRules).includes('maxLength')){\r\n            errs.maxLength = e.target.value.length > validationRules.maxLength ? true : false;\r\n        }\r\n        if(Object.keys(validationRules).includes('pattern')){            \r\n            const re = new RegExp(validationRules.pattern);\r\n            console.log(re.test(e.target.value));\r\n            errs.pattern = !re.test(e.target.value);\r\n        }\r\n        setErrors(errs);\r\n   }\r\n    const validateOnBlur = (e) => {\r\n        let errs = {};\r\n        if(Object.keys(validationRules).includes('required')){\r\n            errs.required = e.target.value.length === 0 ? true : false;\r\n        }\r\n        if(Object.keys(validationRules).includes('minLength')){\r\n            errs.minLength = e.target.value.length < validationRules.minLength ? true : false;\r\n        }\r\n        if(Object.keys(validationRules).includes('maxLength')){\r\n            errs.maxLength = e.target.value.length > validationRules.maxLength ? true : false;\r\n        }\r\n        setErrors(errs);\r\n   }\r\n\r\n    return {\r\n      touched,\r\n      errors,\r\n      value,\r\n      setValue,\r\n      reset: () => {\r\n          setValue('');\r\n          setTouched(false);\r\n      },\r\n      bind: {\r\n        value,\r\n        onChange: e => {\r\n          setValue(e.target.value);\r\n          if(Object.keys(validationRules).length > 0){\r\n              validateOnChange(e)\r\n          }\r\n        },\r\n        onBlur: e => {\r\n            setTouched(true);\r\n            if(Object.keys(validationRules).length > 0){\r\n                validateOnBlur(e)\r\n            }\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  export default Input;\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {config} from '../../Constants';\r\n//import ImageUploader from 'react-images-upload'\r\nimport Input from '../../helpers/Input'\r\n\r\nimport './Nav.css'\r\n\r\nexport default function Nav() {\r\n  let history = useHistory()\r\n  const regMode = useSelector((state) => state.userStatus.regMode)\r\n  const loggedIn = useSelector((state) => state.userStatus.loggedIn)\r\n  const currentUser = useSelector((state) => state.userStatus.currentUser)\r\n  const [photo, setPhoto] = useState('')\r\n  const socket = useSelector((state) => state.chatReducer.socket)\r\n  console.log()\r\n  const dispatch = useDispatch()\r\n  const URL = config.url.API_URL;\r\n\r\n  let NameValidationRules = {\r\n    required: false,\r\n  }\r\n  let PasswordValidationRules = {\r\n    required: false,\r\n    minLength: 3,\r\n    maxLength: 10,\r\n  }\r\n  const {\r\n    value: name,\r\n    bind: bindName,\r\n    reset: resetName,\r\n    touched: nameTouched,\r\n    errors: nameErrors,\r\n  } = Input(NameValidationRules)\r\n  const {\r\n    value: password,\r\n    bind: bindPassword,\r\n    reset: resetPassword,\r\n    touched: passwordTouched,\r\n    errors: passwordErrors,\r\n  } = Input(PasswordValidationRules)\r\n\r\n  const invalidNameInput = nameErrors?.required\r\n  const invalidPasswordInputRequired =\r\n    passwordErrors?.required &&\r\n    passwordErrors?.minLength &&\r\n    !passwordErrors?.maxLength\r\n  const invalidPasswordInputShort =\r\n    passwordTouched && passwordErrors?.minLength && !passwordErrors?.required\r\n  const invalidPasswordInputLong = passwordErrors?.maxLength\r\n\r\n  const invalidNameLabel = nameTouched && nameErrors?.required\r\n\r\n  const invalidPasswordLabel =\r\n    passwordTouched &&\r\n    (passwordErrors?.required ||\r\n      passwordErrors?.minLength ||\r\n      passwordErrors?.maxLength)\r\n  const validPasswordLabel = passwordTouched && !passwordErrors?.required\r\n\r\n  // console.log(`name errors: ${JSON.stringify(nameErrors)}, password errors: ${JSON.stringify(passwordErrors)}, name touched: ${nameTouched}, password touched: ${passwordTouched}`);\r\n\r\n  const invalidForm = () => {\r\n    return !(nameTouched || passwordTouched) ||\r\n      Object.values(passwordErrors).filter((er) => er === true).length > 0 ||\r\n      nameErrors?.required\r\n      ? true\r\n      : false\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const user = { name, password }\r\n    console.log(JSON.stringify(user))\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(user),\r\n    }\r\n\r\n    //post request to Node.js server\r\n    fetch(`${URL}/auth/login`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        if (data.token !== undefined) {\r\n          resetName()\r\n          resetPassword()\r\n          localStorage.setItem('token', data.token)\r\n          dispatch({ type: 'LOGGEDIN', payload: data.token })\r\n          dispatch({\r\n            type: 'CURRENT_USER',\r\n            payload: JSON.stringify(data.user),\r\n          })\r\n          history.push('home')\r\n        }\r\n        //localStorage.setItem('user', JSON.stringify(data.user));\r\n      })\r\n    /*\r\n       //post request to ASP.NET server\r\n       fetch('http://localhost:5000/auth/login', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                localStorage.setItem('token', data.token);\r\n                localStorage.setItem('user', JSON.stringify(data.user));\r\n                dispatch({type: 'CURRENT_USER', payload: JSON.stringify(data.user)});\r\n                dispatch({type: 'DECODED_TOKEN', payload: data.token});\r\n            });\r\n        */\r\n  }\r\n  const logout = () => {\r\n    localStorage.removeItem('token')\r\n    dispatch({ type: 'LOGGEDIN', payload: null })\r\n    if (socket) {\r\n      socket.disconnect()\r\n    }\r\n  }\r\n  const onDrop = (picture) => {\r\n    setPhoto(picture)\r\n  }\r\n\r\n  return (\r\n    <nav className={`navbar ${regMode ? 'hide-navigation' : ''}`}>\r\n      <div className=\"pic\">\r\n        <img src={photo} />\r\n      </div>\r\n      {/* \r\n         <ImageUploader\r\n        withIcon={true}\r\n        buttonText=\"Choose images\"\r\n        onChange={onDrop}\r\n        imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\r\n        maxFileSize={5242880}\r\n      />\r\n      */}\r\n\r\n      <div className=\"burger-container\">\r\n        <input type=\"checkbox\" id=\"burger-check\" className=\"burger-check\" />\r\n        <label\r\n          className={`burger ${regMode ? 'remove-burger' : ''}`}\r\n          htmlFor=\"burger-check\"\r\n        >\r\n          <div className=\"burger-line\"></div>\r\n          <div className=\"burger-line\"></div>\r\n          <div className=\"burger-line\"></div>\r\n        </label>\r\n        <div\r\n          className={`side-menu ${regMode ? 'remove-side-menu' : ''}`}\r\n          id=\"sideMenu\"\r\n        >\r\n          <a href=\"\" className=\"close-side-menu\">\r\n            &times;\r\n          </a>\r\n          <a href=\"# \" className=\"side-menu-item main-link\">\r\n            LanguageTandem\r\n          </a>\r\n          <a href=\"# \" className=\"side-menu-item hover-item\">\r\n            about\r\n          </a>\r\n          <a href=\"# \" className=\"side-menu-item hover-item\">\r\n            contact\r\n          </a>\r\n\r\n          {!loggedIn ? (\r\n            <form onSubmit={handleSubmit} className=\"form-container\">\r\n              <p className=\"heading\">Login</p>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  className=\"input\"\r\n                  autoComplete=\"off\"\r\n                  {...bindName}\r\n                />\r\n                {invalidNameInput ? (\r\n                  <div className=\"feedback invalid-feedback\">\r\n                    Name is required\r\n                  </div>\r\n                ) : null}\r\n                <label\r\n                  htmlFor=\"name\"\r\n                  className={`label ${\r\n                    invalidNameLabel\r\n                      ? 'is-invalid'\r\n                      : nameTouched\r\n                      ? 'is-valid'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  {nameErrors?.required ? 'Name!!!' : 'Name'}\r\n                </label>\r\n              </div>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  className=\"input\"\r\n                  autoComplete=\"off\"\r\n                  {...bindPassword}\r\n                />\r\n                {invalidPasswordInputRequired ? (\r\n                  <div className=\"feedback invalid-feedback\">\r\n                    Password is required\r\n                  </div>\r\n                ) : null}\r\n                {invalidPasswordInputShort ? (\r\n                  <div className=\"feedback invalid-feedback\">\r\n                    Password too short\r\n                  </div>\r\n                ) : null}\r\n                {invalidPasswordInputLong ? (\r\n                  <div className=\"feedback invalid-feedback\">\r\n                    Password too long\r\n                  </div>\r\n                ) : null}\r\n\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className={`label ${\r\n                    invalidPasswordLabel ? 'is-invalid' : ''\r\n                  } ${validPasswordLabel ? 'is-valid' : ''}`}\r\n                >\r\n                  {passwordErrors?.required ||\r\n                  (passwordTouched &&\r\n                    (passwordErrors?.minLength || passwordErrors?.maxLength))\r\n                    ? 'Password!!!'\r\n                    : 'Password'}\r\n                </label>\r\n              </div>\r\n              <div className=\"line\"></div>\r\n              <button\r\n                type=\"submit\"\r\n                className={`btn-raise btn-design ${\r\n                  invalidForm() ? 'btn-disabled' : ''\r\n                }`}\r\n              >\r\n                Login\r\n              </button>\r\n              <div className=\"side-menu-register-btn-container\">\r\n                <span className=\"side-menu-text\">Not a member yet?</span>\r\n                <Link to=\"/register\">\r\n                  <button\r\n                    className=\"btn-link side-menu-btn-link\"\r\n                    onClick={() =>\r\n                      dispatch({ type: 'SET_REGISTER_MODE', payload: true })\r\n                    }\r\n                  >\r\n                    Register\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </form>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"top-menu\">\r\n        <a href=\"# \" className=\"top-menu-item main-link\">\r\n          LanguageTandem\r\n        </a>\r\n        <div className=\"links\">\r\n          {!loggedIn && (\r\n            <a href=\"# \" className=\"top-menu-item\">\r\n              about\r\n            </a>\r\n          )}\r\n\r\n          {loggedIn && (\r\n            <Link to=\"/languages\" className=\"top-menu-item\">\r\n              My Languages\r\n            </Link>\r\n          )}\r\n          {loggedIn && (\r\n            <Link to=\"/matchedusers\" className=\"top-menu-item\">\r\n              Learners\r\n            </Link>\r\n          )}\r\n          {loggedIn && (\r\n            <Link to=\"/chat\" className=\"top-menu-item\">\r\n              Messages\r\n            </Link>\r\n          )}\r\n\r\n          {loggedIn && (\r\n            <a href=\"# \" className=\"top-menu-item\">\r\n              contact\r\n            </a>\r\n          )}\r\n        </div>\r\n        <div className=\"admin-box\">\r\n          {!regMode && !loggedIn ? (\r\n            <div className=\"login-register\">\r\n              <div className=\"login-link\">\r\n                <Link to=\"/login\">\r\n                  <button className=\"btn-link register-btn-design\">\r\n                    Login\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n\r\n              <form\r\n                onSubmit={handleSubmit}\r\n                className=\"login-form login-form-top\"\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name is required\"\r\n                  autoComplete=\"off\"\r\n                  {...bindName}\r\n                  className={`inline-input ${\r\n                    nameTouched && nameErrors?.required ? 'invalid-input' : ''\r\n                  }`}\r\n                />\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password is required\"\r\n                  autoComplete=\"off\"\r\n                  {...bindPassword}\r\n                  className={`inline-input ${\r\n                    (passwordTouched && passwordErrors?.required) ||\r\n                    (passwordTouched && passwordErrors?.minLength) ||\r\n                    (passwordTouched && passwordErrors?.maxLength)\r\n                      ? 'invalid-input'\r\n                      : ''\r\n                  }`}\r\n                />\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  className={`btn-raise btn-design ${\r\n                    invalidForm() ? 'btn-disabled' : ''\r\n                  }`}\r\n                >\r\n                  Login\r\n                </button>\r\n              </form>\r\n              <Link to=\"/register\">\r\n                <button\r\n                  className=\"btn-link register-btn-design\"\r\n                  onClick={() =>\r\n                    dispatch({ type: 'SET_REGISTER_MODE', payload: true })\r\n                  }\r\n                >\r\n                  Register\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            loggedIn && (\r\n              <Link to=\"/start\">\r\n                <button\r\n                  className=\"btn-design btn-raise logout-md\"\r\n                  onClick={() => logout()}\r\n                >\r\n                  Logout\r\n                </button>\r\n              </Link>\r\n            )\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n/*\r\n\r\n<nav class=\"navbar\">\r\n\r\n        <label for=\"burger-check\" class=\"burger-container\" onclick=\"openMenu()\">\r\n            <input type=\"checkbox\" id=\"burger-check\" class=\"burger-check\">\r\n            <div class=\"side-menu\" id=\"sideMenu\">\r\n                <a href=\"\" class=\"close-side-menu\">&times;</a>\r\n                <a href=\"\" class=\"side-menu-item\">home</a>\r\n                <a href=\"\" class=\"side-menu-item\">about</a>\r\n                <a href=\"\" class=\"side-menu-item\">contact</a>\r\n            </div>\r\n            <div class=\"burger\">\r\n                <div class=\"burger-line\"></div>\r\n                <div class=\"burger-line\"></div>\r\n                <div class=\"burger-line\"></div>\r\n            </div>\r\n\r\n        </label>\r\n\r\n        <ul class=\"top-menu\">\r\n            <a href=\"\" class=\"top-menu-item\">home</a>\r\n            <a href=\"\" class=\"top-menu-item\">about</a>\r\n            <a href=\"\" class=\"top-menu-item\">contact</a>\r\n        </ul>\r\n\r\n    </nav>\r\n*/\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {config} from '../../Constants';\r\n\r\nimport Input from '../../helpers/Input'\r\n\r\nimport './Register.css'\r\n\r\nfunction Register(props) {\r\n  const URL = config.url.API_URL;\r\n  const dispatch = useDispatch()\r\n  const regMode = useSelector((state) => state.userStatus.regMode)\r\n  //const registered = useSelector((state) => state.userStatus.registered)\r\n  const [registered, setRegistered] = useState(false)\r\n  let history = useHistory()\r\n\r\n  let NameValidationRules = {\r\n    required: false,\r\n  }\r\n  let EmailValidationRules = {\r\n    required: false,\r\n  }\r\n  let PasswordValidationRules = {\r\n    required: false,\r\n    minLength: 4,\r\n    maxLength: 8,\r\n    pattern: '(?=.*[0-9])(?=.*[A-Z])',\r\n  }\r\n  let CityValidationRules = { required: false }\r\n  let CountryValidationRules = { required: false }\r\n\r\n  const {\r\n    value: name,\r\n    bind: bindName,\r\n    reset: resetName,\r\n    touched: nameTouched,\r\n    errors: nameErrors,\r\n  } = Input(NameValidationRules)\r\n  const {\r\n    value: email,\r\n    bind: bindEmail,\r\n    reset: resetEmail,\r\n    touched: emailTouched,\r\n    errors: emailErrors,\r\n  } = Input(EmailValidationRules)\r\n  const {\r\n    value: password,\r\n    bind: bindPassword,\r\n    reset: resetPassword,\r\n    touched: passwordTouched,\r\n    errors: passwordErrors,\r\n  } = Input(PasswordValidationRules)\r\n  const {\r\n    value: city,\r\n    bind: bindCity,\r\n    reset: resetCity,\r\n    touched: cityTouched,\r\n    errors: cityErrors,\r\n  } = Input(CityValidationRules)\r\n  const {\r\n    value: country,\r\n    bind: bindCountry,\r\n    reset: resetCountry,\r\n    touched: countryTouched,\r\n    errors: countryErrors,\r\n  } = Input(CountryValidationRules)\r\n\r\n  console.log(\r\n    `name errors: ${JSON.stringify(\r\n      nameErrors,\r\n    )}, password errors: ${JSON.stringify(\r\n      passwordErrors,\r\n    )}, name touched: ${nameTouched}, password touched: ${passwordTouched}`,\r\n  )\r\n\r\n  const invalidNameInput = nameErrors?.required\r\n  const invalidEmailInput = nameErrors?.required\r\n  const invalidPasswordInputRequired =\r\n    passwordErrors?.required &&\r\n    passwordErrors?.minLength &&\r\n    !passwordErrors?.maxLength &&\r\n    !passwordErrors?.pattern\r\n  const invalidPasswordInputShort =\r\n    passwordTouched && passwordErrors?.minLength && !passwordErrors?.required\r\n  const invalidPasswordInputLong = passwordErrors?.maxLength\r\n\r\n  const invalidNameLabel = nameTouched && nameErrors?.required\r\n  const invalidEmailLabel = emailTouched && emailErrors?.required\r\n\r\n  const invalidPasswordLabel =\r\n    passwordTouched &&\r\n    (passwordErrors?.required ||\r\n      passwordErrors?.minLength ||\r\n      passwordErrors?.maxLength)\r\n  const validPasswordLabel = passwordTouched && !passwordErrors?.required\r\n\r\n  const invalidCityLabel = cityTouched && cityErrors?.required\r\n  const invalidCountryLabel = countryTouched && countryErrors?.required\r\n\r\n  console.log(\r\n    Object.values(passwordErrors).filter((er) => er === true).length === 0,\r\n  )\r\n  console.log(\r\n    `one of fields untouched: ${!(\r\n      !nameTouched ||\r\n      !passwordTouched ||\r\n      !cityTouched ||\r\n      !countryTouched\r\n    )}`,\r\n  )\r\n  console.log(nameTouched, passwordTouched, cityTouched, countryTouched)\r\n\r\n  const invalidForm = () => {\r\n    return !(\r\n      !nameTouched ||\r\n      !emailTouched ||\r\n      !passwordTouched ||\r\n      !cityTouched ||\r\n      !countryTouched\r\n    ) ||\r\n      Object.values(passwordErrors).filter((er) => er === true).length > 0 ||\r\n      nameErrors?.required ||\r\n      emailErrors?.required ||\r\n      cityErrors?.required ||\r\n      countryErrors?.required\r\n      ? true\r\n      : false\r\n  }\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault()\r\n    const user = {\r\n      name,\r\n      email,\r\n      password,\r\n      city,\r\n      country,\r\n    }\r\n    console.log(JSON.stringify(user))\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(user),\r\n    }\r\n\r\n    /*\r\n        fetch('http://localhost:4000/users/register', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data) );\r\n        \r\n        */\r\n    fetch(`${URL}/auth/register`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        resetName()\r\n        resetEmail()\r\n        resetPassword()\r\n        resetCity()\r\n        resetCountry()\r\n        dispatch({ type: 'SET_REGISTER_MODE', payload: false })\r\n        //dispatch({ type: 'SUCCESSFULLY_REGISTERED', payload: true })\r\n        setRegistered(true)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"register-page\">\r\n      {regMode && !registered ? (\r\n        <div className=\"register-page-container\">\r\n          <form\r\n            onSubmit={handleRegister}\r\n            className=\"register-form-container\"\r\n            autoComplete=\"off\"\r\n          >\r\n            <p className=\"heading\">Register</p>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                className=\"input\"\r\n                autoComplete=\"off\"\r\n                {...bindName}\r\n              />\r\n              {invalidNameInput ? (\r\n                <div className=\"feedback invalid-feedback\">\r\n                  Name is required\r\n                </div>\r\n              ) : null}\r\n              <label\r\n                htmlFor=\"name\"\r\n                className={`label ${\r\n                  invalidNameLabel\r\n                    ? 'is-invalid'\r\n                    : nameTouched\r\n                    ? 'is-valid'\r\n                    : ''\r\n                }`}\r\n              >\r\n                {nameErrors?.required ? 'Name!!!' : 'Name'}\r\n              </label>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className=\"input\"\r\n                autoComplete=\"off\"\r\n                {...bindEmail}\r\n              />\r\n              {invalidEmailInput ? (\r\n                <div className=\"feedback invalid-feedback\">\r\n                  Email is required\r\n                </div>\r\n              ) : null}\r\n              <label\r\n                htmlFor=\"name\"\r\n                className={`label ${\r\n                  invalidEmailLabel\r\n                    ? 'is-invalid'\r\n                    : emailTouched\r\n                    ? 'is-valid'\r\n                    : ''\r\n                }`}\r\n              >\r\n                {emailErrors?.required ? 'Email!!!' : 'Email'}\r\n              </label>\r\n            </div>\r\n            {/* {`required: ${nameErrors?.required}, touched: ${nameErrors?.touched}`} */}\r\n            <div className=\"input-group\">\r\n              <input\r\n                name=\"password\"\r\n                type=\"password\"\r\n                className=\"input\"\r\n                autoComplete=\"off\"\r\n                {...bindPassword}\r\n              />\r\n              {invalidPasswordInputRequired ? (\r\n                <div class=\"feedback invalid-feedback\">\r\n                  Password is required\r\n                </div>\r\n              ) : null}\r\n              {invalidPasswordInputShort ? (\r\n                <div class=\"feedback invalid-feedback\">Password too short</div>\r\n              ) : null}\r\n              {invalidPasswordInputLong ? (\r\n                <div class=\"feedback invalid-feedback\">Password too long</div>\r\n              ) : null}\r\n              {passwordErrors?.pattern ? (\r\n                <div class=\"feedback invalid-feedback\">\r\n                  at least one capital letter / digit!\r\n                </div>\r\n              ) : null}\r\n\r\n              <label\r\n                htmlFor=\"password\"\r\n                className={`label ${invalidPasswordLabel ? 'is-invalid' : ''} ${\r\n                  validPasswordLabel ? 'is-valid' : ''\r\n                }`}\r\n              >\r\n                {passwordErrors?.required ||\r\n                (passwordTouched &&\r\n                  (passwordErrors?.minLength || passwordErrors?.maxLength))\r\n                  ? 'Password!!!'\r\n                  : 'Password'}\r\n              </label>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"city\"\r\n                className=\"input\"\r\n                autoComplete=\"off\"\r\n                {...bindCity}\r\n              />\r\n              {cityErrors?.required ? (\r\n                <div className=\"feedback invalid-feedback\">\r\n                  City is required\r\n                </div>\r\n              ) : null}\r\n              <label\r\n                htmlFor=\"city\"\r\n                className={`label ${\r\n                  invalidCityLabel\r\n                    ? 'is-invalid'\r\n                    : cityTouched\r\n                    ? 'is-valid'\r\n                    : ''\r\n                }`}\r\n              >\r\n                {cityErrors?.required ? 'City!!!' : 'City'}\r\n              </label>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"country\"\r\n                className=\"input\"\r\n                autoComplete=\"off\"\r\n                {...bindCountry}\r\n              />\r\n              {countryErrors?.required ? (\r\n                <div className=\"feedback invalid-feedback\">\r\n                  Country is required\r\n                </div>\r\n              ) : null}\r\n              <label\r\n                htmlFor=\"name\"\r\n                className={`label ${\r\n                  invalidCountryLabel\r\n                    ? 'is-invalid'\r\n                    : countryTouched\r\n                    ? 'is-valid'\r\n                    : ''\r\n                }`}\r\n              >\r\n                {countryErrors?.required ? 'Country!!!' : 'Country'}\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"register-btns\">\r\n              <button\r\n                type=\"submit\"\r\n                className={`btn-raise btn-design btn-register ${\r\n                  invalidForm() ? '' : ''\r\n                }`}\r\n              >\r\n                Register\r\n              </button>\r\n              <Link to=\"/\">\r\n                <button\r\n                  className=\"btn-link cancel-register-btn\"\r\n                  onClick={() =>\r\n                    dispatch({ type: 'SET_REGISTER_MODE', payload: false })\r\n                  }\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        registered && (\r\n          <div className=\"registered-message-container\">\r\n            <div className=\"registered-message\">\r\n              Registered Successfully! Please log in with your new credentials!\r\n            </div>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n","import React from \"react\";\r\n\r\nconst UsersToMeet = () => {\r\n  return (\r\n    <div>\r\n      <p>from UsersToMeet</p>\r\n    </div>\r\n  );\r\n};\r\nexport default UsersToMeet;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./MatchedUser.css\";\r\n\r\nconst MatchedUser = ({ user, userFromSocket }) => {\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  console.log(user);\r\n  /*\r\n  const addContact = () => {\r\n    console.log(user.name);\r\n    dispatch({ type: \"SET_CONTACT\", payload: user.name });\r\n    history.push(\"chat\");\r\n  };\r\n  */\r\n  const openContactForm = () => {\r\n    dispatch({ type: \"SET_CONTACT\", payload: user });\r\n    history.push(\"/contact\");\r\n  };\r\n  const startChat = () => {\r\n    dispatch({ type: \"SET_CHATTER\", payload: userFromSocket });\r\n    history.push(\"chat\");\r\n  };\r\n  return (\r\n    <div className=\"user-container\">\r\n      <div className=\"user-content\">\r\n        <div className=\"user-card-header\">\r\n          <p>\r\n            {user.name[0].toUpperCase() + user.name.slice(1, user.name.length)}\r\n          </p>\r\n          <button\r\n            className={`start-chat ${!userFromSocket && \"start-chat-inactive\"}`}\r\n            disabled={!userFromSocket}\r\n            onClick={() => startChat()}\r\n          >\r\n            {userFromSocket ? ` online` : ` offline`}\r\n          </button>\r\n        </div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"horizontal-center\">\r\n          <b>\r\n            {user.city}, {user.country}\r\n          </b>\r\n        </div>\r\n        <div className=\"languages-container\">\r\n          <div className=\"lgs\">\r\n            <h4 className=\"lgs-header\">Speaks:</h4>\r\n\r\n            {user.offeredLgs?.map((lg) => {\r\n              return <p>{lg}</p>;\r\n            })}\r\n          </div>\r\n          <div className=\"lgs\">\r\n            <h4 className=\"lgs-header\">Learning:</h4>\r\n\r\n            {user.wantedLgs?.map((lg) => {\r\n              return <p>{lg}</p>;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n        className=\"btn-raise contact-btn\"\r\n        onClick={() => openContactForm()}\r\n      >\r\n        Send Email\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default MatchedUser;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport \"./MatchedUsers.css\";\r\nimport {config} from '../../Constants';\r\n//import Slider from \"react-slick\";\r\nimport MatchedUser from \"../MatchedUser/MatchedUser\";\r\n\r\nconst MatchedUsers = () => {\r\n  /*\r\n  var settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 2000,\r\n    slidesToShow: 6,\r\n    slidesToScroll: 6,\r\n  };\r\n  */\r\n const URL = config.url.API_URL;\r\n  const users = useSelector((state) => state.userStatus.filteredUsers);\r\n  const decodedToken = useSelector((state) => state.userStatus.decodedToken);\r\n  const currentUser = useSelector((state) => state.userStatus.currentUser);\r\n  const contact = useSelector((state) => state.chatReducer.contactName);\r\n  const [connectedUsers, setConnectedUsers] = useState([]);\r\n  const connectedMembers = useSelector(\r\n    (state) => state.chatReducer.connectedMembers\r\n  );\r\n  const [socket, setSocket] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [notifyAboutMessage, setNotifyAboutMessage] = useState(false);\r\n  let dispatch = useDispatch();\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    console.log(currentUser);\r\n    const socket = io(URL).on(\"connect\", () => {\r\n      console.log(\"connected to server\");\r\n    });\r\n    if (connectedMembers) {\r\n      setConnectedUsers(connectedMembers);\r\n      console.log(connectedMembers);\r\n    }\r\n    if (!connectedMembers) {\r\n      socket.emit(\"connect-user\", { userName: JSON.parse(currentUser).name });\r\n    }\r\n\r\n    socket.on(\"all-users\", (members) => {\r\n      setConnectedUsers(members);\r\n      dispatch({ type: \"SET_CONNECTED_USERS\", payload: members });\r\n      setConnectedUsers(members);\r\n\r\n      console.log(members);\r\n    });\r\n    console.log(connectedUsers);\r\n    // sender here is who originally sent, currentUser is the receiver\r\n    socket.on(\"message-received\", ({ text, chatter, sender }) => {\r\n      console.log(text);\r\n      console.log(chatter);\r\n      console.log(currentUser);\r\n      console.log(sender);\r\n      console.log(connectedMembers);\r\n      console.log(connectedUsers);\r\n\r\n      setNotifyAboutMessage(true);\r\n\r\n      console.log(JSON.parse(currentUser));\r\n      if (sender[0]) {\r\n        setMessage({\r\n          from: sender[0].userName,\r\n          to: JSON.parse(currentUser).name,\r\n          text,\r\n        });\r\n        dispatch({\r\n          type: \"SET_MESSAGE\",\r\n          payload: {\r\n            from: sender[0].userName,\r\n            to: JSON.parse(currentUser).name,\r\n            text,\r\n          },\r\n        });\r\n      }\r\n\r\n      // payload: {userName: sender.name, socketId:     }  !!! check from sonnectedUsers, by userName\r\n      dispatch({ type: \"SET_CHATTER\", payload: sender[0] });\r\n    });\r\n    dispatch({ type: \"SET_SOCKET\", payload: socket });\r\n    setSocket(socket);\r\n    return () => setNotifyAboutMessage(false);\r\n  }, []);\r\n\r\n  const getUserFromSocket = (user) => {\r\n    console.log(connectedUsers);\r\n    console.log(connectedMembers);\r\n    const userFromSocket = connectedUsers.filter((connectedUser) => {\r\n      console.log(connectedUser);\r\n      if (connectedUser.userName === user.name) {\r\n        return connectedUser;\r\n      }\r\n    });\r\n\r\n    return userFromSocket.length === 0 ? null : userFromSocket[0];\r\n  };\r\n  console.log(users);\r\n  return (\r\n    <div className=\"main\">\r\n      {users && users.length !== 0 ? (\r\n        <div className=\"users-page-container\">\r\n          <div className=\"users-container\">\r\n            {users?.map((user, key) => {\r\n              return (\r\n                <div key={`${key}`} className=\"\">\r\n                  <MatchedUser\r\n                    user={user}\r\n                    userFromSocket={getUserFromSocket(user)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {notifyAboutMessage && (\r\n            <button\r\n              className=\"message-notification\"\r\n              onClick={() => history.push(\"/chat\")}\r\n            >\r\n              You have a message from{\" \"}\r\n              <span className=\"message-from-name\">{message.from}</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"no-users-container\">\r\n          <div className=\"no-users\">\r\n            So far no users found that match your languages\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default MatchedUsers;\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport './LanguagesForm.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function LanguagesForm() {\r\n  const decodedToken = useSelector((state) => state.userStatus.decodedToken)\r\n\r\n  let history = useHistory()\r\n  const offeredLgs = useSelector(\r\n    (state) => state.languagesReducer.userOfferedLgs,\r\n  )\r\n  console.log(offeredLgs)\r\n  const wantedLgs = useSelector((state) => state.languagesReducer.userWantedLgs)\r\n\r\n  const checkInput = { errors: { required: true } } // later from form's errors, if no checkbox was checked\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { register, handleSubmit, errors, watch } = useForm()\r\n  const [emptyOfferedLgsArr, setEmptyOfferedLgsArr] = useState(true)\r\n  const [emptyWantedLgsArr, setEmptyWantedLgsArr] = useState(true)\r\n  // const token = useSelector(state => state.userReducer.decodedToken);\r\n\r\n  let offeredlgsArr = [\r\n    { name: 'english', country: 'gb', selected: false },\r\n    { name: 'french', country: 'fr', selected: false },\r\n    { name: 'spanish', country: 'es', selected: false },\r\n    { name: 'german', country: 'de', selected: false },\r\n    { name: 'chinese', country: 'cn', selected: false },\r\n    { name: 'russian', country: 'ru', selected: false },\r\n    { name: 'italian', country: 'it', selected: false },\r\n    { name: 'portuguese', country: 'pt', selected: false },\r\n    { name: 'greek', country: 'gr', selected: false },\r\n    { name: 'japanese', country: 'jp', selected: false },\r\n    { name: 'dutch', country: 'nl', selected: false },\r\n    { name: 'turkish', country: 'tr', selected: false },\r\n  ]\r\n  let wantedlgsArr = [\r\n    { name: 'english', country: 'gb', selected: false },\r\n    { name: 'french', country: 'fr', selected: false },\r\n    { name: 'spanish', country: 'es', selected: false },\r\n    { name: 'german', country: 'de', selected: false },\r\n    { name: 'chinese', country: 'cn', selected: false },\r\n    { name: 'russian', country: 'ru', selected: false },\r\n    { name: 'italian', country: 'it', selected: false },\r\n    { name: 'portuguese', country: 'pt', selected: false },\r\n    { name: 'greek', country: 'gr', selected: false },\r\n    { name: 'japanese', country: 'jp', selected: false },\r\n    { name: 'dutch', country: 'nl', selected: false },\r\n    { name: 'turkish', country: 'tr', selected: false },\r\n  ]\r\n\r\n  const [checkedOfferedLgs, setCheckedOfferedLgs] = useState([])\r\n  const [checkedWantedLgs, setCheckedWantedLgs] = useState([])\r\n  useEffect(() => {\r\n    setCheckedOfferedLgs(setInitialOfferedLgsChecks())\r\n  }, [])\r\n  useEffect(() => {\r\n    setCheckedWantedLgs(setInitialWantedLgsChecks())\r\n  }, [])\r\n  function setInitialOfferedLgsChecks() {\r\n    let arr = []\r\n    console.log(offeredLgs)\r\n    if (offeredLgs?.length > 0) {\r\n      for (const lg of offeredlgsArr) {\r\n        for (const lgFromDB of offeredLgs) {\r\n          if (lg.name === lgFromDB.name) {\r\n            offeredlgsArr[offeredlgsArr.indexOf(lg)].selected = true\r\n            arr.push(lg.name)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (arr.length > 0) {\r\n      setEmptyOfferedLgsArr(false)\r\n    }\r\n    return arr\r\n  }\r\n  function setInitialWantedLgsChecks() {\r\n    let arr = []\r\n    console.log(wantedLgs)\r\n    if (wantedLgs?.length > 0) {\r\n      for (const lg of wantedlgsArr) {\r\n        for (const lgFromDB of wantedLgs) {\r\n          if (lg.name === lgFromDB.name) {\r\n            wantedlgsArr[wantedlgsArr.indexOf(lg)].selected = true\r\n            arr.push(lg.name)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (arr.length > 0) {\r\n      setEmptyWantedLgsArr(false)\r\n    }\r\n    return arr\r\n  }\r\n\r\n  const submitForm = async () => {\r\n    const requestOptionsOfferedLgs = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        id: decodedToken.id,\r\n        offeredLgs: checkedOfferedLgs,\r\n      }), //id: token.id\r\n    }\r\n    fetch(\r\n      'http://localhost:4000/auth/adduserofferedlgs',\r\n      requestOptionsOfferedLgs,\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          console.log(data)\r\n          console.log(data.offerelgs)\r\n          dispatch({ type: 'SET_USER_OFFEREDLGS', payload: data.offeredlgs })\r\n          //history.push(\"/home\");\r\n          //dispatch({ type: \"SET_USER_WANTEDLGS\", payload: data.wantedLgs });\r\n        }\r\n      })\r\n    const requestOptionsWantedLgs = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        id: decodedToken.id,\r\n        wantedLgs: checkedWantedLgs,\r\n      }), //id: token.id\r\n    }\r\n    fetch(\r\n      'http://localhost:4000/auth/adduserwantedlgs',\r\n      requestOptionsWantedLgs,\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          dispatch({ type: 'SET_USER_WANTEDLGS', payload: data.wantedlgs })\r\n          //history.push(\"/home\");\r\n          //dispatch({ type: \"SET_USER_WANTEDLGS\", payload: data.wantedLgs });\r\n        }\r\n      })\r\n    history.push('/home')\r\n  }\r\n  const sortOfferedLgs = () => {\r\n    const sortedOfferedLgs = offeredlgsArr.sort((a, b) =>\r\n      a.name > b.name ? 1 : -1,\r\n    )\r\n    console.log(sortedOfferedLgs)\r\n    return sortedOfferedLgs\r\n  }\r\n  const sortWantedLgs = () => {\r\n    const sortedWantedLgs = wantedlgsArr.sort((a, b) =>\r\n      a.name > b.name ? 1 : -1,\r\n    )\r\n    console.log(sortedWantedLgs)\r\n    return sortedWantedLgs\r\n  }\r\n\r\n  const onOfferedLgsCheckboxChange = (e) => {\r\n    console.log(e.target.checked)\r\n    console.log(e.target.value)\r\n\r\n    if (e.target.checked) {\r\n      setCheckedOfferedLgs([...checkedOfferedLgs, e.target.value])\r\n    } else {\r\n      for (const lg of checkedOfferedLgs) {\r\n        if (lg === e.target.value) {\r\n          const checkedLgsCopy = [...checkedOfferedLgs]\r\n          checkedLgsCopy.splice(checkedLgsCopy.indexOf(lg), 1)\r\n          setCheckedOfferedLgs(checkedLgsCopy)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const onWantedLgsCheckboxChange = (e) => {\r\n    console.log(e.target.checked)\r\n    console.log(e.target.value)\r\n\r\n    if (e.target.checked) {\r\n      setCheckedWantedLgs([...checkedWantedLgs, e.target.value])\r\n    } else {\r\n      for (const lg of checkedWantedLgs) {\r\n        if (lg === e.target.value) {\r\n          const checkedLgsCopy = [...checkedWantedLgs]\r\n          checkedLgsCopy.splice(checkedLgsCopy.indexOf(lg), 1)\r\n          setCheckedWantedLgs(checkedLgsCopy)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"lgs-form\" onSubmit={handleSubmit(submitForm)}>\r\n      <div className=\"boxes-container\">\r\n        <div className=\"boxes\">\r\n          <div className=\"box box-1\">\r\n            <div className=\"header centering-container\">\r\n              <p>I am a speaker of</p>\r\n            </div>\r\n\r\n            <div className=\"lgs-container\">\r\n              <ul className=\"popup-list\">\r\n                <div className=\"popup-col\">\r\n                  {sortOfferedLgs()\r\n                    .slice(0, 6)\r\n                    .map((lg, i) => {\r\n                      return (\r\n                        <li key={i} className=\"popup-item\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={lg.name}\r\n                            className=\"\"\r\n                            value={lg.name}\r\n                            onChange={onOfferedLgsCheckboxChange}\r\n                            name={lg.name}\r\n                            ref={register()}\r\n                            checked={\r\n                              lg.selected || checkedOfferedLgs.includes(lg.name)\r\n                            }\r\n                          />\r\n\r\n                          <label className=\"popup-label\" for={lg.name}>\r\n                            <span\r\n                              className={`flag-icon flag-icon-${lg.country}`}\r\n                            ></span>\r\n                            {lg.name}\r\n                          </label>\r\n                        </li>\r\n                      )\r\n                    })}\r\n                </div>\r\n                <div class=\"popup-col\">\r\n                  {sortOfferedLgs()\r\n                    .slice(6, 12)\r\n                    .map((lg, i) => {\r\n                      return (\r\n                        <li key={i} className=\"popup-item\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={lg.name}\r\n                            className=\"\"\r\n                            value={lg.name}\r\n                            onChange={onOfferedLgsCheckboxChange}\r\n                            name={lg.name}\r\n                            ref={register()}\r\n                            checked={\r\n                              lg.selected || checkedOfferedLgs.includes(lg.name)\r\n                            }\r\n                          />\r\n\r\n                          <label className=\"popup-label\" for={lg.name}>\r\n                            <span\r\n                              className={`flag-icon flag-icon-${lg.country}`}\r\n                            ></span>\r\n                            {lg.name}\r\n                          </label>\r\n                        </li>\r\n                      )\r\n                    })}\r\n                </div>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          {/*\r\n           ****************************************************\r\n           */}\r\n          <div className=\"box box-2\">\r\n            <div className=\"header centering-container\">\r\n              <p>I want to learn</p>\r\n            </div>\r\n\r\n            <div className=\"lgs-container\">\r\n              <ul className=\"popup-list\">\r\n                <div className=\"popup-col\">\r\n                  {sortWantedLgs()\r\n                    .slice(0, 6)\r\n                    .map((lg, i) => {\r\n                      return (\r\n                        <li key={i} className=\"popup-item\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={lg.name}\r\n                            className=\"\"\r\n                            value={lg.name}\r\n                            onChange={onWantedLgsCheckboxChange}\r\n                            name={lg.name}\r\n                            ref={register()}\r\n                            checked={\r\n                              lg.selected || checkedWantedLgs.includes(lg.name)\r\n                            }\r\n                          />\r\n\r\n                          <label className=\"popup-label\" for={lg.name}>\r\n                            <span\r\n                              className={`flag-icon flag-icon-${lg.country}`}\r\n                            ></span>\r\n                            {lg.name}\r\n                          </label>\r\n                        </li>\r\n                      )\r\n                    })}\r\n                </div>\r\n                <div class=\"popup-col\">\r\n                  {sortWantedLgs()\r\n                    .slice(6, 12)\r\n                    .map((lg, i) => {\r\n                      return (\r\n                        <li key={i} className=\"popup-item\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={lg.name}\r\n                            className=\"\"\r\n                            value={lg.name}\r\n                            onChange={onWantedLgsCheckboxChange}\r\n                            name={lg.name}\r\n                            ref={register()}\r\n                            checked={\r\n                              lg.selected || checkedWantedLgs.includes(lg.name)\r\n                            }\r\n                          />\r\n\r\n                          <label className=\"popup-label\" for={lg.name}>\r\n                            <span\r\n                              className={`flag-icon flag-icon-${lg.country}`}\r\n                            ></span>\r\n                            {lg.name}\r\n                          </label>\r\n                        </li>\r\n                      )\r\n                    })}\r\n                </div>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`no-warning ${\r\n            checkedOfferedLgs.length === 0 ||\r\n            (checkedWantedLgs.length === 0 && 'warning')\r\n          }`}\r\n        >\r\n          <p className=\"horizontal-center\">\r\n            At least one languages from each section must be selected!\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"languages-btn-container\">\r\n        <button\r\n          type=\"submit\"\r\n          className={`btn-raise language-btn ${\r\n            checkedOfferedLgs.length === 0 ||\r\n            (checkedWantedLgs.length === 0 && 'language-btn-disabled')\r\n          }`}\r\n          disabled={\r\n            checkedOfferedLgs.length === 0 || checkedWantedLgs.length === 0\r\n          }\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n/*\r\n<p>popup works!</p>\r\n<div class='popup' *ngIf='offeredLgsMode || wantedLgsMode'>  \r\n    <div class='centering-container'>\r\n        <p class=\"popup-heading\" [ngClass]=\"{'error-no-language-selected': !updateLgsForm.controls['checkArray'].errors?.required}\">\r\n            select <span class='or'>or</span>                                      \r\n        </p>\r\n        <button class='btn-link btn-cancelLgChange' (click)='setLanguagesChangeMode(false)'>Cancel</button>  \r\n    </div>      \r\n    \r\n    \r\n    <form className=\"form-container onSubmit={handleSubmit(submitForm)}\">\r\n                    \r\n        <ul class='popup-list'>\r\n            <div class='popup-col'>      \r\n                <li *ngFor='let lg of getItemList() | slice:0:6' class='popup-item'>\r\n                    <input type=\"checkbox\" id='{{lg.name}}' \r\n                        [value]='lg.name' (change)=\"onCheckboxChange($event)\" class=\"\" [checked]='lg.selected'>\r\n                    <label class='popup-label' for='{{lg.name}}'>\r\n                        <span class=\"flag-icon flag-icon-{{lg.country}}\"></span>{{lg.name}}\r\n                    </label>\r\n                </li> \r\n            </div>    \r\n            <div class='popup-col'>      \r\n                <li *ngFor='let lg of getItemList() | slice:6:12' class='popup-item'>\r\n                    <input type=\"checkbox\" id='{{lg.name}}' \r\n                        [value]='lg.name' (change)=\"onCheckboxChange($event)\" class=\"\" [checked]='lg.selected'>\r\n                    <label class='popup-label' for='{{lg.name}}'>\r\n                        <span class=\"flag-icon flag-icon-{{lg.country}}\"></span>{{lg.name}}\r\n                    </label>\r\n                </li> \r\n            </div>                                 \r\n        </ul>\r\n    <div class='centering-container'>\r\n        <button type='submit' class='btn-raise btn-lg-change-submit' [disabled]='!updateLgsForm.valid'>Submit</button>\r\n    </div>                  \r\n    </form>\r\n<!--offeredLgsMode from db...with resolver to home and here via parent-child, \r\n    if offeredLgsMode -> sortedLgs is sortedOfferedLgs, in this js\r\n\r\n    updateOfferedLgsForm replace with formName....depends on mode\r\n-->         \r\n<button (click)='showFormValue()'>Show Form  and data</button>\r\n</div>  \r\n\r\n\r\n\r\n\r\n\r\n*/\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {config} from '../../Constants';\r\nimport UsersToMeet from '../UsersToMeet/UsersToMeet'\r\nimport MatchedUsers from '../MatchedUsers/MatchedUsers'\r\nimport LanguagesForm from '../LanguagesForm/LanguagesForm'\r\nimport './Home.css'\r\n\r\n//import io from 'socket.io-client'\r\n\r\nconst Home = () => {\r\n  const URL = config.url.API_URL;\r\n  const decodedToken = useSelector((state) => state.userStatus.decodedToken)\r\n  const currentUser = useSelector((state) => state.userStatus.currentUser)\r\n  //console.log(decodedToken.id);\r\n  /*\r\n  const thisUserOfferedLgs = useSelector(\r\n    (state) => state.languagesReducer.userWantedLgs\r\n  );\r\n  */\r\n  const [offeredLgs, setOfferedLgs] = useState([])\r\n  const [wantedLgs, setWantedLgs] = useState([])\r\n  const [filteredUsers, setFilteredUsers] = useState([])\r\n  const [usersToMeet, setUsersToMeet] = useState([])\r\n  const [socket, setSocket] = useState(null)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    console.log(currentUser)\r\n    getUserOfferedLgs()\r\n    getUserWanteddLgs()\r\n  }, [])\r\n  useEffect(() => {\r\n    console.log(wantedLgs)\r\n    console.log(offeredLgs)\r\n    if (wantedLgs?.length > 0 && offeredLgs?.length > 0) {\r\n      searchUsers(wantedLgs, offeredLgs)\r\n    }\r\n  }, [wantedLgs, offeredLgs])\r\n  /*\r\n  useEffect(() => {\r\n    console.log(currentUser);\r\n    const socket = io(\"http://localhost:4000\").on(\"connect\", () => {\r\n      console.log(\"connected to server\");\r\n    });\r\n    \r\n    socket.emit(\"connect-user\", { userName: JSON.parse(currentUser).name });\r\n    socket.on(\"all-users\", (members) => {\r\n      console.log(`members connected: ${JSON.stringify(members)}`);\r\n      dispatch({ type: \"SET_CONNECTED_USERS\", payload: members });\r\n    });\r\n\r\n    socket.on(\"message-received\", (text) => {\r\n      console.log(text);\r\n    });\r\n    dispatch({ type: \"SET_SOCKET\", payload: socket });\r\n    setSocket(socket);\r\n    return () => socket.disconnect();\r\n  }, []);\r\n  */\r\n  const getUserOfferedLgs = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id: decodedToken.id }), // id: decodedToken.id\r\n    }\r\n    fetch(`${URL}/auth/thisUserOfferedLgs`, requestOptions)\r\n      .then((resp) => resp.json())\r\n      .then((offeredLgs) => {\r\n        const mode = offeredLgs?.offeredlgs.length === 0 ? true : false\r\n        console.log(offeredLgs?.offeredlgs)\r\n        dispatch({\r\n          type: 'SET_USER_OFFEREDLGS',\r\n          payload: offeredLgs.offeredlgs,\r\n        })\r\n        dispatch({ type: 'SET_OFFERED_LGS_MODE', payload: mode })\r\n        setOfferedLgs(offeredLgs.offeredlgs)\r\n      })\r\n  }\r\n  const getUserWanteddLgs = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id: decodedToken.id }), // id: decodedToken.id\r\n    }\r\n    fetch(`${URL}/auth/thisUserWantedLgs`, requestOptions)\r\n      .then((resp) => resp.json())\r\n      .then((wantedLgs) => {\r\n        const mode = wantedLgs?.wantedlgs.length === 0 ? true : false\r\n        dispatch({ type: 'SET_USER_WANTEDLGS', payload: wantedLgs.wantedlgs })\r\n        dispatch({ type: 'SET_WANTED_LGS_MODE', payload: mode })\r\n        setWantedLgs(wantedLgs.wantedlgs)\r\n      })\r\n  }\r\n  const searchUsers = (wantedlgs, offeredlgs) => {\r\n    console.log('submit')\r\n    const offeredLgsArr = offeredlgs.map((el) => el.name)\r\n    const wantedLgsArr = wantedlgs.map((el) => el.name)\r\n    console.log(wantedLgsArr)\r\n    console.log(offeredLgsArr)\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        offeredLgs: offeredLgsArr,\r\n        wantedLgs: wantedLgsArr,\r\n      }),\r\n    }\r\n    fetch(`${URL}/auth/filterUsers`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data.filteredUsers)\r\n        const matchedUsers = data.filteredUsers.filter((user) => {\r\n          console.log(user.name, currentUser, JSON.parse(currentUser).name)\r\n          return user.name !== JSON.parse(currentUser).name\r\n        })\r\n        console.log(matchedUsers)\r\n        dispatch({ type: 'FILTERED_USERS', payload: matchedUsers })\r\n        setFilteredUsers(matchedUsers)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-section\">\r\n      {usersToMeet.length > 0 ? (\r\n        <UsersToMeet />\r\n      ) : filteredUsers.length > 0 ? (\r\n        <MatchedUsers />\r\n      ) : offeredLgs.length === 0 || wantedLgs.length === 0 ? (\r\n        <LanguagesForm />\r\n      ) : (\r\n        <div className=\"no-users-container\">\r\n          <div className=\"no-users\">\r\n            So far no users found that match your languages\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default Home\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\r\n  const decodedToken = useSelector((state) => state.userStatus.decodedToken);\r\n  console.log(decodedToken);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      path={path}\r\n      render={(props) =>\r\n        decodedToken ? <Component {...props} /> : <Redirect to={\"/register\"} />\r\n      }\r\n    />\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {config} from '../../Constants';\r\n\r\nimport Input from \"../../helpers/Input\";\r\n\r\nimport \"./Login.css\";\r\n\r\nfunction Login(props) {\r\n  const URL = config.url.API_URL;\r\n  const dispatch = useDispatch();\r\n\r\n  let history = useHistory();\r\n\r\n  let NameValidationRules = {\r\n    required: false,\r\n  };\r\n  let PasswordValidationRules = {\r\n    required: false,\r\n  };\r\n\r\n  const {\r\n    value: name,\r\n    bind: bindName,\r\n    reset: resetName,\r\n    touched: nameTouched,\r\n    errors: nameErrors,\r\n  } = Input(NameValidationRules);\r\n  const {\r\n    value: password,\r\n    bind: bindPassword,\r\n    reset: resetPassword,\r\n    touched: passwordTouched,\r\n    errors: passwordErrors,\r\n  } = Input(PasswordValidationRules);\r\n\r\n  console.log(\r\n    `name errors: ${JSON.stringify(\r\n      nameErrors\r\n    )}, password errors: ${JSON.stringify(\r\n      passwordErrors\r\n    )}, name touched: ${nameTouched}, password touched: ${passwordTouched}`\r\n  );\r\n\r\n  const invalidNameInput = nameErrors?.required;\r\n  const invalidPasswordInputRequired = passwordErrors?.required;\r\n\r\n  const invalidNameLabel = nameTouched && nameErrors?.required;\r\n\r\n  const invalidPasswordLabel = passwordTouched && passwordErrors?.required;\r\n\r\n  const validPasswordLabel = passwordTouched && !passwordErrors?.required;\r\n\r\n  console.log(\r\n    Object.values(passwordErrors).filter((er) => er === true).length === 0\r\n  );\r\n\r\n  const invalidForm = () => {\r\n    return !(!nameTouched || !passwordTouched || !nameErrors?.required\r\n      ? true\r\n      : false);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    const user = { name, password };\r\n    console.log(JSON.stringify(user));\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(user),\r\n    };\r\n\r\n    //post request to Node.js server\r\n    fetch(`${URL}/auth/login`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.token !== undefined) {\r\n          resetName();\r\n          resetPassword();\r\n          localStorage.setItem(\"token\", data.token);\r\n          dispatch({ type: \"LOGGEDIN\", payload: data.token });\r\n          history.push(\"home\");\r\n        }\r\n        //localStorage.setItem('user', JSON.stringify(data.user));\r\n        dispatch({ type: \"CURRENT_USER\", payload: JSON.stringify(data.user) });\r\n      });\r\n    /*\r\n       //post request to ASP.NET server\r\n       fetch('http://localhost:5000/auth/login', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                localStorage.setItem('token', data.token);\r\n                localStorage.setItem('user', JSON.stringify(data.user));\r\n                dispatch({type: 'CURRENT_USER', payload: JSON.stringify(data.user)});\r\n                dispatch({type: 'DECODED_TOKEN', payload: data.token});\r\n            });\r\n        */\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-page\">\r\n      <div className=\"register-page-container\">\r\n        <form\r\n          onSubmit={handleLogin}\r\n          className=\"register-form-container\"\r\n          autoComplete=\"off\"\r\n        >\r\n          <p className=\"heading\">Register</p>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              className=\"input\"\r\n              autoComplete=\"off\"\r\n              {...bindName}\r\n            />\r\n            {invalidNameInput ? (\r\n              <div className=\"feedback invalid-feedback\">Name is required</div>\r\n            ) : null}\r\n            <label\r\n              htmlFor=\"name\"\r\n              className={`label ${\r\n                invalidNameLabel ? \"is-invalid\" : nameTouched ? \"is-valid\" : \"\"\r\n              }`}\r\n            >\r\n              {nameErrors?.required ? \"Name!!!\" : \"Name\"}\r\n            </label>\r\n          </div>\r\n          {/* {`required: ${nameErrors?.required}, touched: ${nameErrors?.touched}`} */}\r\n          <div className=\"input-group\">\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"input\"\r\n              autoComplete=\"off\"\r\n              {...bindPassword}\r\n            />\r\n            {invalidPasswordInputRequired ? (\r\n              <div class=\"feedback invalid-feedback\">Password is required</div>\r\n            ) : null}\r\n\r\n            {passwordErrors?.pattern ? (\r\n              <div class=\"feedback invalid-feedback\">\r\n                at least one capital letter / digit!\r\n              </div>\r\n            ) : null}\r\n\r\n            <label\r\n              htmlFor=\"password\"\r\n              className={`label ${invalidPasswordLabel ? \"is-invalid\" : \"\"} ${\r\n                validPasswordLabel ? \"is-valid\" : \"\"\r\n              }`}\r\n            >\r\n              {passwordErrors?.required ||\r\n              (passwordTouched &&\r\n                (passwordErrors?.minLength || passwordErrors?.maxLength))\r\n                ? \"Password!!!\"\r\n                : \"Password\"}\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"register-btns\">\r\n            <button\r\n              type=\"submit\"\r\n              className={`btn-raise btn-design btn-register ${\r\n                invalidForm() ? \"\" : \"\"\r\n              }`}\r\n            >\r\n              Login\r\n            </button>\r\n            <Link to=\"/\">\r\n              <button\r\n                className=\"btn-link cancel-register-btn\"\r\n                onClick={() =>\r\n                  dispatch({ type: \"SET_REGISTER_MODE\", payload: false })\r\n                }\r\n              >\r\n                Cancel\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport io from 'socket.io-client'\r\nimport './Chat.css'\r\n\r\nconst Chat = () => {\r\n  const decodedToken = useSelector((state) => state.userStatus.decodedToken)\r\n  const currentUser = useSelector((state) => state.userStatus.currentUser)\r\n  const chatter = useSelector((state) => state.chatReducer.chatter)\r\n  const socket = useSelector((state) => state.chatReducer.socket)\r\n  const message = useSelector((state) => state.chatReducer.message)\r\n\r\n  const [text, setText] = useState('')\r\n  useEffect(() => {\r\n    console.log(currentUser)\r\n    console.log(chatter)\r\n\r\n    /*\r\n    socket.on(\"user-connected\", (data) => {\r\n      console.log(\"from user-connected\");\r\n      console.log(\r\n        `user with id: ${data.userId}, and socketId: ${data.socketId} connected`\r\n      );\r\n    });\r\n    */\r\n\r\n    //return () => socket.disconnect();\r\n  }, [])\r\n  // here chatter is to whom message sent, sender: who sends message\r\n  const onFormSubmit = (e) => {\r\n    console.log(currentUser)\r\n    console.log(chatter)\r\n    const messageToSend = { text, chatter, sender: JSON.parse(currentUser) }\r\n    e.preventDefault()\r\n    console.log(message)\r\n    socket.emit('new-contact', messageToSend)\r\n  }\r\n  return (\r\n    <div className=\"\">\r\n      {chatter ? (\r\n        <div className=\"chat-container\">\r\n          <form onSubmit={onFormSubmit} className=\"form\">\r\n            <h3 className=\"chat-header\">\r\n              <span className=\"name\">{JSON.parse(currentUser).name}, </span>you\r\n              are chatting with <span className=\"name\">{chatter.userName}</span>\r\n            </h3>\r\n            <div className=\"chat-form\">\r\n              <textarea\r\n                className=\"chat-textarea\"\r\n                type=\"text\"\r\n                onChange={(e) => setText(e.target.value)}\r\n              />\r\n              <button className=\"chat-btn\" type=\"submit\">\r\n                Send\r\n              </button>\r\n            </div>\r\n          </form>\r\n          <div className=\"chat-messages-container\">\r\n            {chatter.userName === message?.from && (\r\n              <div className=\"message\">\r\n                <p className=\"from\">{message?.from}</p>\r\n                <p className=\"text\">{message?.text}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"no-messages-container\">\r\n          <div className=\"no-messages\">\r\n            You have no active chats at the moment!\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./ContactForm.css\";\r\n\r\nconst ContactForm = () => {\r\n  const { register, handleSubmit, errors, watch } = useForm();\r\n  const userToContact = useSelector((state) => state.chatReducer.contact);\r\n  const currentUser = useSelector((state) => state.userStatus.currentUser);\r\n  const [messageSent, setMessageSent] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  let history = useHistory();\r\n\r\n  const submitForm = (data) => {\r\n    const { from, password, to, subject, text } = data;\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        from,\r\n        password,\r\n        to,\r\n        subject,\r\n        text,\r\n      }), //id: token.id\r\n    };\r\n    fetch(\"http://localhost:4000/auth/sendemail\", requestOptions)\r\n      .then((res) => {\r\n        setMessageSent(true);\r\n        setTimeout(() => {\r\n          history.push(\"/matchedusers\");\r\n        }, 2000);\r\n      })\r\n      .catch((err) => setError(true));\r\n  };\r\n  return (\r\n    <div className=\"contact-page\">\r\n      <div className=\"contact-column\">\r\n        <form\r\n          className=\"contact-form-container\"\r\n          onSubmit={handleSubmit(submitForm)}\r\n        >\r\n          <div className=\"contact-input-group\">\r\n            <label htmlFor=\"\" className=\"contact-label\">\r\n              My Email\r\n            </label>\r\n            <input\r\n              className=\"contact-input\"\r\n              type=\"email\"\r\n              name=\"from\"\r\n              ref={register({ required: true })}\r\n              placeholder={JSON.parse(currentUser).email}\r\n              defaultValue={JSON.parse(currentUser).email}\r\n              required\r\n            />\r\n            {errors.from && <div className=\"\">{errors.from.message}</div>}\r\n          </div>\r\n          <div className=\"contact-input-group\">\r\n            <label htmlFor=\"\" className=\"contact-label\">\r\n              My Password\r\n            </label>\r\n            <input\r\n              className=\"contact-input\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              ref={register({ required: true })}\r\n              required\r\n            />\r\n            {errors.password && (\r\n              <div className=\"\">{errors.password.message}</div>\r\n            )}\r\n          </div>\r\n          <div className=\"contact-input-group\">\r\n            <label htmlFor=\"\" className=\"contact-label\">\r\n              Email to\r\n            </label>\r\n            <input\r\n              className=\"contact-input\"\r\n              type=\"email\"\r\n              name=\"to\"\r\n              ref={register({ required: true })}\r\n              placeholder={userToContact.email}\r\n              defaultValue={userToContact.email}\r\n              required\r\n            />\r\n            {errors.to && <div className=\"\">{errors.to.message}</div>}\r\n          </div>\r\n          <div className=\"contact-input-group\">\r\n            <label htmlFor=\"\" className=\"contact-label\">\r\n              Subject\r\n            </label>\r\n            <input\r\n              className=\"contact-input\"\r\n              type=\"text\"\r\n              name=\"subject\"\r\n              ref={register({ required: true })}\r\n              required\r\n            />\r\n            {errors.subject && <div className=\"\">{errors.subject.message}</div>}\r\n          </div>\r\n\r\n          <div className=\"contact-input-group\">\r\n            <textarea\r\n              className=\"contact-text\"\r\n              name=\"text\"\r\n              placeholder=\"My message here...\"\r\n              ref={register({ required: true })}\r\n            />\r\n            {errors.text && <div className=\"\">{errors.text.message}</div>}\r\n          </div>\r\n\r\n          <input type=\"submit\" value=\"submit\" className=\"contact-btn\" />\r\n        </form>\r\n        {messageSent && (\r\n          <div className=\"contact-feedback\">\r\n            Email successfully sent to {userToContact.name}\r\n          </div>\r\n        )}\r\n        {error && (\r\n          <div className=\"contact-feedback\">\r\n            There was a problem sending email to{\" \"}\r\n            <span className=\"contact-with\">{userToContact.name}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Nav from \"./components/Nav/Nav\";\nimport Register from \"./components/Register/Register\";\nimport Home from \"./components/Home/Home\";\nimport LanguagesForm from \"./components/LanguagesForm/LanguagesForm\";\nimport PrivateRoute from \"./PrivateRouter\";\nimport Login from \"./components/Login/Login\";\nimport MatchedUsers from \"./components/MatchedUsers/MatchedUsers\";\nimport Chat from \"./components/Chat/Chat\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n        <Nav />\n        <div className=\"holder\">\n          <Switch>\n            <Route exact path=\"/login\">\n              <Login />\n            </Route>\n            <Route exact path=\"/register\">\n              <Register />\n            </Route>\n\n            <PrivateRoute exact path=\"/home\" component={Home} />\n            <PrivateRoute exact path=\"/languages\" component={LanguagesForm} />\n            <PrivateRoute exact path=\"/matchedusers\" component={MatchedUsers} />\n            <PrivateRoute exact path=\"/chat\" component={Chat} />\n            <PrivateRoute exact path=\"/contact\" component={ContactForm} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import JwtDecode from 'jwt-decode'\r\n\r\nconst defaultState = {\r\n  regMode: false,\r\n  currentUser: null,\r\n  loggedIn: false,\r\n  decodedToken: null,\r\n  filteredUsers: null,\r\n  registered: false,\r\n}\r\n\r\nconst userStatus = (state = defaultState, action) => {\r\n  console.log(state)\r\n  switch (action.type) {\r\n    case 'SET_REGISTER_MODE':\r\n      return {\r\n        ...state,\r\n        regMode: action.payload,\r\n      }\r\n\r\n    case 'CURRENT_USER':\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n      }\r\n    case 'SUCCESSFULLY_REGISTERED':\r\n      return {\r\n        ...state,\r\n        registered: action.payload,\r\n      }\r\n    case 'LOGGEDIN':\r\n      const jwtDecode = require('jwt-decode')\r\n      let isExpired = true\r\n      const dateNow = new Date()\r\n      let decodedToken = null\r\n      if (action.payload) {\r\n        decodedToken = jwtDecode(action.payload)\r\n        //console.log(jwtDecode(action.payload));\r\n        if (decodedToken.exp < dateNow.getTime()) {\r\n          isExpired = false\r\n        }\r\n      }\r\n      console.log(isExpired)\r\n      console.log(JSON.stringify(action.payload))\r\n      return {\r\n        ...state,\r\n        loggedIn: !isExpired,\r\n        decodedToken,\r\n      }\r\n    case 'FILTERED_USERS':\r\n      return { ...state, filteredUsers: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default userStatus\r\n","import JwtDecode from 'jwt-decode'\r\n\r\nconst defaultState = {\r\n  // userOfferedLgs:{}\r\n}\r\n/*\r\nconst getUserOfferedLgs = () => {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ id: decodedToken.id }), // id: decodedToken.id\r\n  }\r\n  fetch('http://localhost:4000/auth/thisUserOfferedLgs', requestOptions)\r\n    .then((resp) => resp.json())\r\n    .then((offeredLgs) => {\r\n      const mode = offeredLgs?.offeredlgs.length === 0 ? true : false\r\n      console.log(offeredLgs?.offeredlgs)\r\n      return offeredLgs?.offeredlgs\r\n    })\r\n}\r\n*/\r\nconst languagesReducer = (state = defaultState, action) => {\r\n  console.log(state)\r\n\r\n  switch (action.type) {\r\n    case 'SET_USER_OFFEREDLGS':\r\n      return { ...state, userOfferedLgs: action.payload }\r\n    /*\r\n    case 'GET_USER_OFFEREDLGS':\r\n      return { ...state, userOfferedLgs: getUserOfferedLgs() }\r\n    */\r\n    case 'SET_USER_WANTEDLGS':\r\n      return { ...state, userWantedLgs: action.payload }\r\n    case 'SET_OFFERED_LGS_MODE':\r\n      return { ...state, offeredLgsMode: action.payload }\r\n    case 'SET_WANTED_LGS_MODE':\r\n      return { ...state, wantedLgsMode: action.payload }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default languagesReducer\r\n","import JwtDecode from \"jwt-decode\";\r\n\r\nconst defaultState = {\r\n  socket: null,\r\n  chatter: null,\r\n  connectedMembers: null,\r\n};\r\n\r\nconst chatReducer = (state = defaultState, action) => {\r\n  console.log(state);\r\n  switch (action.type) {\r\n    case \"SET_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contact: action.payload,\r\n      };\r\n    case \"SET_CHATTER\":\r\n      return {\r\n        ...state,\r\n        chatter: action.payload,\r\n      };\r\n    case \"SET_SOCKET\":\r\n      return {\r\n        ...state,\r\n        socket: action.payload,\r\n      };\r\n    case \"SET_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        message: action.payload,\r\n      };\r\n    /*\r\n    case 'SET_MESSAGES':\r\n      const {from, to, text} = action.payload;\r\n      */\r\n    case \"SET_CONNECTED_USERS\":\r\n      return {\r\n        ...state,\r\n        connectedMembers: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userStatus from \"./userStatus\";\r\nimport languagesReducer from \"./languagesReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  userStatus,\r\n  languagesReducer,\r\n  chatReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}